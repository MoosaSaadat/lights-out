{"version":3,"sources":["Cell.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","bind","assertThisInitialized","e","flipCellsAroundMe","classes","isLit","react_default","a","createElement","className","onClick","Component","Board","state","hasWon","board","createBoard","i","nrows","row","j","ncols","push","Math","random","chanceLightStartsOn","coord","console","log","_this$props","_coord$split$map","split","map","Number","_coord$split$map2","slicedToArray","y","x","flipCell","every","cell","setState","_this2","cellGrid","_loop","concat","src_Cell_0","key","makeTable","defaultProps","App","src_Board_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e58ef0b5.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './Cell.css'\r\n\r\nclass Cell extends Component {\r\n     constructor (props) {\r\n          super(props);\r\n          this.handleClick = this.handleClick.bind(this);\r\n     }\r\n     handleClick(e) {\r\n          this.props.flipCellsAroundMe();\r\n     }\r\n     render() {\r\n          let addClass = this.props.isLit ?  \" Cell-lit\": \"\";\r\n          let classes = \"Cell\" + addClass;\r\n          return (\r\n               <td className={classes} onClick={this.handleClick} />\r\n          )\r\n     }\r\n}\r\n\r\nexport default Cell;\r\n","import React, {Component} from 'react';\r\nimport Cell from './Cell';\r\nimport './Board.css'\r\n\r\nclass Board extends Component {\r\n     static defaultProps = {\r\n          nrows: 5,\r\n          ncols: 5,\r\n          chanceLightStartsOn: 0.25\r\n     }\r\n     constructor(props) {\r\n          super(props);\r\n          this.state = {\r\n               hasWon: false,\r\n               board: this.createBoard()\r\n          }\r\n     }\r\n     createBoard() {\r\n          let board = [];\r\n          for (var i = 0; i < this.props.nrows; i++) {\r\n               let row = [];\r\n               for (var j = 0; j < this.props.ncols; j++) {\r\n                    row.push(Math.random() < this.props.chanceLightStartsOn);\r\n               }\r\n               board.push(row);\r\n          }\r\n          return board;\r\n     }\r\n     flipCellsAroundMe(coord) {\r\n          console.log(coord);\r\n          let {ncols, nrows} = this.props;\r\n          let board = this.state.board;\r\n          let [y, x] = coord.split(\"-\").map(Number);\r\n\r\n\r\n          function flipCell(y, x) {\r\n            if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\r\n              board[y][x] = !board[y][x];\r\n            }\r\n          }\r\n          flipCell(y, x);\r\n          flipCell(y, x-1);\r\n          flipCell(y, x+1);\r\n          flipCell(y-1, x);\r\n          flipCell(y+1, x);\r\n\r\n          let hasWon = board.every(row => row.every(cell => !cell));\r\n          this.setState({board: board, hasWon: hasWon});\r\n     }\r\n     makeTable() {\r\n          let cellGrid = [];\r\n          for (var i = 0; i < this.props.nrows; i++) {\r\n               let row = [];\r\n               for (var j = 0; j < this.props.ncols; j++) {\r\n                    let coord = `${i}-${j}`;\r\n                    row.push(<Cell key={coord}\r\n                                   isLit={this.state.board[i][j]}\r\n                                   flipCellsAroundMe={() => (\r\n                                        this.flipCellsAroundMe(coord)\r\n                                   )} />)\r\n               }\r\n               cellGrid.push(<tr key={`${i}`}>{row}</tr>);\r\n          }\r\n          return cellGrid;\r\n     }\r\n     render() {\r\n          if (this.state.hasWon) {\r\n               return (\r\n                    <div className=\"Board\">\r\n                         <div className=\"Board-win-text\">\r\n                              <div className=\"neon-orange\">Congratulations!</div>\r\n                              <div className=\"neon-blue\">You won</div>\r\n                         </div>\r\n                    </div>\r\n               );\r\n          }\r\n          return (\r\n               <div className=\"Board\">\r\n               {\r\n                    this.state.hasWon ?\r\n                    <div className=\"Board-win-text\">\r\n                         <div className=\"neon-orange\">Congratulations!</div>\r\n                         <div className=\"neon-blue\">You won</div>\r\n                    </div> :\r\n                    <div className=\"Board-title\">\r\n                         <div className=\"neon-orange\">Lights</div>\r\n                         <div className=\"neon-blue\">Out!</div>\r\n                    </div>\r\n               }\r\n               <table className=\"Board-table\">\r\n                    <tbody>\r\n                         {this.makeTable()}\r\n                    </tbody>\r\n               </table>\r\n               </div>\r\n          )\r\n     }\r\n}\r\n\r\nexport default Board;\r\n","import React from 'react';\nimport Board from './Board'\nimport './App.css';\n\nfunction App() {\n     return (\n          <div className=\"App\">\n               <Board />\n          </div>\n     );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}